law(theater,language(coffeescript))

ID = 0

#MONITOR
UPON "adopted", ->
	if @arguments.monitor?
    DO "set", key: "monitor", value: @arguments.monitor
  if @arguments.monitor is true
  	return true

  if @arguments.Type?

  	if @arguments.Type is "globe"
  		DO "forward", receiver: @arguments.monitor, message: "#{@self} is formed"
			DO "set", key: "Type", value: "globe"

		if @arguments.Type is "agent"
			DO "forward", receiver: @arguments.monitor, message: "#{@self} is formed"
			DO "set", key: "Type", value: "agent"

	return true

#Sent
#REQUEST agent
UPON "sent", ->
	if CS("monitor")? #DEBUG
    DO "forward", receiver: CS("monitor"), message: "#{@self} sent a message to #{@receiver}"

UPON "sent", ->
	if CS("Type") is "agent"

		if @message.type is "Request"
      if CS("Ticket")?
        DO "deliver", message: "You already have a ticket. You cannot request another."
      else
        DO "set", key: "RequestTo#{@receiver}", value: true
        DO "forward"
      return true

    if @message.type is "Ticket"
      DO "deliver", message: CS("RequestFrom#{@receiver}")
      if CS("RequestFrom#{@receiver}")?
        if CS("Ticket")?
          DO "unset", key: "Ticket"
          DO "unset", key: "RequestFrom#{@receiver}"
          DO "forward", receiver: @receiver, sender: @sender, message: {type: "Ticket", ticket: CS("Ticket")}
        else
          DO "deliver", message: "Cannot send ticket"
      else  # TODO @receiver.Type is globe
        if CS("Ticket")?
          DO "unset", key: "Ticket"
          DO "forward", receiver: @receiver, sender: @sender, message: {type: "Ticket", ticket: CS("Ticket")}
        else
          DO "deliver", message: "Cannot send ticket"
			return true


UPON "sent", ->
  if CS("Type") is "globe"
    if @message.type is "Request"
    	DO "deliver", message: "Globe is not allowed to make a request"

    if @message.type is "Ticket"
      DO "deliver", message: CS("RequestFrom#{@receiver}")
      if CS("RequestFrom#{@receiver}")?
        ID++
        DO "unset", key: "RequestFrom#{@receiver}"
        DO "set", key: "Ticket#{ID}", value: true
				DO "forward", receiver: @receiver, sender: @sender, message: {type: "Ticket", ticket: ID}
				return true
			else
				DO "forward", message: "Ticket cannot be provided"
		return true

		if @message.type is "Open"
      if CS("OpenDoorFor#{@receiver}")?
        DO "forward", message: "Door is open"
      else
        DO "deliver", message: "Invalid ticket was provided"
      return true

#Any other message
UPON "sent", ->
	DO "forward"
	return true

#Arrived
#REQUEST, TICKET globe
UPON "arrived", ->
  if CS("monitor")?	#DEBUG
    DO "forward", receiver: CS("monitor"), message: "#{@self} receives a message from #{@sender}"

 		if CS("Type") is "globe"

    	if @message.type is "Request"
        if not CS("RequestFrom#{@sender}")?
          DO "set", key: "RequestFrom#{@sender}", value: true
          DO "deliver"
          return true
        else
          DO "forward", receiver: @sender, message: "Still processing previous request"
        	return true

      if @message.type is "Ticket"
        DO "deliver", message: @message.ticket
        if CS("Ticket#{@message.ticket}")?
          DO "unset", key: "Ticket#{@message.ticket}"
          DO "set", key: "OpenDoorFor#{@sender}", value: true
          DO "deliver"
          return true
        else
          DO "forward", receiver: @sender, message: "Invalid Ticket."
      		return true

    if CS("Type") is "agent"
      if @message.type is "Ticket"
      	if CS("RequestTo#{@sender}")?
        	DO "unset", key: "RequestTo#{@sender}"
		      DO "set", key: "Ticket", value: @message.ticket
		      DO "deliver"
    	  	return true

      if @message.type is "Request"
        if not CS("RequestFrom#{@sender}")?
          DO "set", key: "RequestFrom#{@sender}", value: true
          DO "deliver"
          return true
        else
          DO "forward", receiver: @sender, message: "Still processing previous request"
       	 	return true

#Automatic responses
UPON "arrived", ->
  DO "deliver"
  return true

#DISCONNECT
UPON "disconnected", ->
	if CS("monitor")?
    DO "forward", receiver: CS("monitor"), message: "#{@self} is dissolved"
  DO "quit"
  return true
